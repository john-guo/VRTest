<?xml version="1.0"?>
<shaderConfig>
  <!-- One set of rules -->
  <rules>
    <!-- REQUIRED: id, constantType, and modToApply as well as at least one of constantName and startReg (can supply both)
    
        id - a positive unsigned 32bit integer (must be unique amongst rules in this file)
        constantType - Valid constant types are MatrixC, MatrixR and Vector (C - column major, R - row major)
        modToApply - a positive unsigned 32bit integer (see bottom of this file)
        startReg - a positive unsigned 32bit integer (the start register of the constant)
        constantName - the name of the shader constant
        
        OPTIONAL:
        partialName - false if not specified. If true the provided constantName will be matched using strstr logic (case sensitive, partial name appearing anywhere in actual name)
        transpose - Should the matricies be transposed before and after operations are applied (ignored if type is Vector). Default = false if not specified.
        Note that whether the stored type of the constant is MatrixC or MatrixR doesn't have much bearing on whether you need to transpose or not 
        (because the C or R reported doesn't always match the actual format) -->
    
    <rule id="1" constantType="MatrixC" modToApply="3" startReg="4"/>
    <rule id="2" constantType="MatrixC" modToApply="2" startReg="8" constantName ="Proj" partialName="true" transpose="true"/>
    <rule id="3" constantType="Vector" modToApply="3" constantName ="EyePos" partialName="true" />
  </rules>

  <!-- IDs of rules to apply to all shaders (optional, 1 set of defaults only). All id's must match a rule in the rules section  -->
  <defaultRuleIDs>
    <ruleID id="1" />
    <ruleID id="2" />
    <!-- Bad --> <ruleID id="5" /> <!-- Bad, no rule with the id 5-->
  </defaultRuleIDs>

  <!-- Rules to apply to shader with hash matching shaderHash (requiered) instead of default rules (default rules will not be applied to the shader) 
      (shader specific rules are optional, as many sets as needed can be provided) If both default and shader specific are left out then no rules will ever be applied. 
      shaderHash is an unsigned 32bit integer that matches the hash (32bit murmur x86 hash) of the shader this set of rules applies to-->
  <shaderSpecificRuleIDs shaderHash="12345">
    <ruleID id="3" />
  </shaderSpecificRuleIDs>
</shaderConfig>
